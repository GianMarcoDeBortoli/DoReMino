{"version":3,"sources":["modules/sound.js","modules/melodyEvaluator.js","score.js"],"names":["synth","Tone","Synth","toDestination","poly","PolySynth","pluck","PluckSynth","membrane","MembraneSynth","metal","MetalSynth","volume","value","searchForNote","playChordsOnHeader","index","triggerAttackRelease","playNoteOnHeader","playPluck","playMembrane","errorSound","changeSetSound","interval","setInterval","setTimeout","clearInterval","play_melody","result","time","now","i","length","grade","indexOf","note","sameDirectionLastLeap","melody","l","Math","abs","sign","neighbourNotes","score","notNeighbourNotes","tooWideLastLeap","meanOfDistances","tooWideLeaps","sameDirectionLeaps","beginOnTonic","endOnTonic","differentNotes","j","findContour","len","contourCode","code","oneDirectionContour","undefined","multiDirectionContour","dominosContainer","document","getElementById","colors","lowerGrades","delay","pros","cons","parseGetVars","res","URLSearchParams","location","search","substring","get","params","resultString","split","push","parseInt","playMelody","cleanDominos","domino","createDomino","appendChild","lastElementChild","removeChild","resultElement","piece","createElement","classList","add","textContent","color","style","backgroundColor","animationDelay","writeTips","positive","querySelector","negative","innerHTML","addEventListener","GOOD_THRESHOLD","EXCELLENT_THRESHOLD","COLOR_CODES","bad","good","threshold","excellent","moveScoreBar","elem","width","id","frame","setColor","firstPainfulRender","retryButton","finalEvaluateMelody","begin","melodyEvaluator","end","diffNotes","contour","negContour","posContour","wideLeaps","meanDistance","sameDirLeaps","neighNotes","notNeighNotes","indivScores","diff","round","sqrt","computeScore","diffnotes","countour","leaps","a","b","c","d","replace"],"mappings":"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","file":"score.73ee2f19.js","sourceRoot":"..","sourcesContent":["/* ************************************************** MODEL **************************************************** */\r\n\r\n/* creation of synths with tone.js */\r\nexport const synth = new Tone.Synth().toDestination();\r\nconst poly = new Tone.PolySynth().toDestination();\r\nconst pluck = new Tone.PluckSynth().toDestination();\r\nconst membrane = new Tone.MembraneSynth().toDestination();\r\nconst metal = new Tone.MetalSynth().toDestination();\r\n\r\n/* regulation of volumes */\r\npluck.volume.value = -12;\r\nmembrane.volume.value = -12;\r\nmetal.volume.value = -12;\r\n\r\n/* dictionary used to get the correct note from of the grade */\r\nexport const searchForNote = [[-6, -5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12],\r\n                       [\"F#3\", \"G3\", \"G#3\", \"A3\", \"A#3\", \"B3\", \"C4\", \"C#4\", \"D4\", \"D#4\", \"E4\", \"F4\", \"F#4\", \"G4\", \"G#4\", \"A4\", \"A#4\", \"B4\", \"C5\"]];\r\n\r\n\r\n/* functions that creates the ambient sounds */\r\nexport function playChordsOnHeader(index) {\r\n    if (index == 0) poly.triggerAttackRelease([\"C4\", \"G4\"], \"8n\");\r\n    else if (index == 1) poly.triggerAttackRelease([\"D4\", \"F4\"], \"8n\");\r\n    else if (index == 2) poly.triggerAttackRelease([\"B3\", \"E4\", \"G4\"], \"8n\");\r\n    else if (index == 3) synth.triggerAttackRelease(\"C4\", \"4n\");\r\n}\r\n\r\nexport function playNoteOnHeader(index) {\r\n    if (index == 0) synth.triggerAttackRelease(\"C4\", \"8n\");\r\n    else if (index == 1) synth.triggerAttackRelease(\"D4\", \"8n\");\r\n    else if (index == 2) synth.triggerAttackRelease(\"E4\", \"8n\");\r\n}\r\n\r\nexport function playPluck() {\r\n    pluck.triggerAttackRelease(\"C5\", \"16n\");\r\n}\r\n\r\nexport function playMembrane() {\r\n    membrane.triggerAttackRelease(\"C4\", \"16n\");\r\n}\r\n\r\nexport function errorSound() {\r\n    metal.triggerAttackRelease(\"C5\", \"32n\");\r\n}\r\n\r\nexport function changeSetSound() {\r\n    let interval = setInterval(function () {pluck.triggerAttackRelease(\"C6\", \"32n\")}, 40);\r\n    setTimeout(function () {clearInterval(interval)}, 300);\r\n}\r\n\r\n/* function that plays back the melody built inside the game */\r\nexport function play_melody(result){\r\n  let time = 0;\r\n  const now = Tone.now()\r\n      for(let i=0 ; i<result.length; i++){\r\n          let grade = result[i];\r\n          let index = searchForNote[0].indexOf(grade);\r\n          let note = searchForNote[1][index];\r\n          synth.triggerAttackRelease(note, \"8n\", now + time);\r\n          time += 0.5;\r\n      }\r\n}\r\n","// ------------------------------------ functions used also to evaluate the melody during the game -----------------------\r\n\r\n\r\n/*This function returns the number of wide leaps (at least 1 sixth - 9 semitones) followed by a leap in the same direction*/\r\nexport function sameDirectionLastLeap(melody) {\r\n    var l = melody.length;\r\n    if (Math.abs(melody[l - 2] - melody[l - 1]) > 9 && (Math.sign(melody[l - 2] - melody[l - 1]) == Math.sign(melody[l - 1] - melody[l]))) {\r\n        return 1;\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/* This function returns the number of consecutive neighbour notes*/\r\nexport function neighbourNotes(melody){\r\n  var score = 0.0;\r\n   for(let i=1; i<melody.length; i++){\r\n    if ( Math.abs(melody[i-1]-melody[i]) < 3 ) {\r\n      score ++;\r\n    }\r\n  }\r\n  return score;\r\n}\r\n\r\n/* This function returns the number of consecutive NOT neighbour notes*/\r\nexport function notNeighbourNotes(melody){\r\n  var score = 0.0;\r\n   for(let i=1; i<melody.length; i++){\r\n    if ( Math.abs(melody[i-1]-melody[i]) > 2 ) {\r\n      score ++;\r\n    }\r\n  }\r\n  return score;\r\n}\r\n\r\n/* This function returns 1 if the last added note is at more than an octave of distance, 0 otherwise*/\r\nexport function tooWideLastLeap(melody){\r\n  if (Math.abs(melody[melody.length-2]-melody[melody.length-1]) > 12) {\r\n    return 1;\r\n  }\r\n  else {\r\n    return 0;\r\n  }\r\n}\r\n\r\n/* This function returns the mean of the abs value of the jumps. Checks if there are too many wide oscillations in the melody (meaning many jumps)\r\nIf the mean value is more than a 5th, the melody is too oscillating*/\r\nexport function meanOfDistances(melody) {\r\n    var score = 0.0;\r\n    for (let i = 1; i < melody.length; i++) {\r\n        score += Math.abs(melody[i - 1] - melody[i]);\r\n    }\r\n    return score / (melody.length-1);\r\n}\r\n\r\n\r\n// ------------------------------------ END functions used also to evaluate the melody during the game -----------------------\r\n\r\n// ------------------------------------ functions used only to evaluate the melody at the end of the game -----------------------\r\n\r\n\r\n\r\n/* This function returns a negative score: returns the number of too wide leaps (over 1 octave). 1 ocatve is represented by a leap of 12 in our case. */\r\nexport function tooWideLeaps(melody){\r\n var score = 0.0;\r\n for(let i=1; i<melody.length-1; i++){\r\n   if ( Math.abs(melody[i-1]-melody[i]) > 12 ) {\r\n     score ++;\r\n   }\r\n }\r\n return score;\r\n}\r\n\r\n/*This function returns the number of wide leaps (at least 1 sixth - 9 semitones) followed by a leap in the same direction*/\r\nexport function sameDirectionLeaps(melody) {\r\n    var score = 0.0;\r\n    for (let i = 2; i < melody.length; i++) {\r\n        if (Math.abs(melody[i - 2] - melody[i - 1]) > 9 && (Math.sign(melody[i - 2] - melody[i - 1]) == Math.sign(melody[i - 1] - melody[i - 0]))) {\r\n            score++;\r\n        }\r\n    }\r\n    return score;\r\n}\r\n\r\n// -- FUNCTIONS ABOUT FIRST AND LAST NOTE -- //\r\n\r\n//returns 0 if the melody begins on the first grade [0], 1 otherwise\r\nexport function beginOnTonic(melody){\r\n  if (melody[0]==0) {\r\n    return 0;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\n//returns 0 if the melody ends on the first grade [0], 1 otherwise\r\nexport function endOnTonic(melody){\r\n  if (melody[melody.length-1]==0) {\r\n    return 0;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\n/* This function counts how many different notes are there in the melody */\r\nexport function differentNotes(melody) {\r\n    let score = 0;\r\n\r\n    for (let i = 0; i < melody.length; i++) {\r\n        var j;\r\n        for (j = 0; j < i; j++)\r\n           if (melody[i] == melody[j])\r\n               break;\r\n   \r\n        if (i == j)\r\n            score += 1\r\n    }\r\n    return score;\r\n}\r\n\r\n\r\n\r\n// -- FUNCTIONS ABOUT CONTOUR -- //\r\n\r\n/* this function returns an evaluation of the melody so far based on the melody contour.*/\r\n/*\r\nThe melody is scanned to get the contour of every block of 3 notes. The possible contours are:\r\n11 RISING\r\n12 RISING - FLAT\r\n13 RISING - FALLING\r\n21 FLAT - RISING\r\n22 FLAT\r\n23 FLAT - FALLING\r\n31 FALLING - RISING\r\n32 FALLING - FLAT\r\n33 FALLING\r\n\r\nIf 3 contours with repeated same digits (11, 22, 33) are found consecutive of each other, (eg: 11 - 11 means there are 4 notes all in a ascending scale) there is a penalty in the score.\r\nIn other cases, if the consecutive are inversions (eg: 12 - 21) it means that vore varying patterns are repeated, and that's good\r\n*/\r\nexport function findContour(melody){\r\n  var len = melody.length;\r\n  if (len<3){\r\n    return;\r\n  }\r\n  var contourCode = [];\r\n  // scanning trough the melody to detect patterns.\r\n  for(let i=1; i<len-1; i++){ //i goes from the second note to the second-last note\r\n    var code;\r\n    if (melody[i-1]<melody[i]) code = 10; // first note is lower than second: rising\r\n    else if (melody[i-1]==melody[i]) code = 20; // first note is same as second: flat\r\n    else if (melody[i-1]>melody[i]) code = 30; // first note is higher than second: falling\r\n    if (melody[i]<melody[i+1]) code = code + 1; // second note is lower than third: rising\r\n    else if (melody[i]==melody[i+1]) code = code + 2; // second note is same as third: flat\r\n    else if (melody[i]>melody[i+1]) code = code + 3;// second note is higher than third: falling\r\n    contourCode[i-1] = code;\r\n  }\r\n\r\n  return contourCode;\r\n}\r\n\r\n/* This function returns a negative score: subtracts a point every time 4 notes are in the same contour (rising - flat - falling) */\r\nexport function oneDirectionContour(contourCode) {\r\n    var score = 0.0;\r\n    if (undefined !== contourCode && contourCode.length) {\r\n        // remove points when patterns with not repeated digits are placed next to each other\r\n        for (let i = 1; i < contourCode.length; i++) {\r\n            if ((contourCode[i - 1] == contourCode[i] && (contourCode[i - 1] == 11 || contourCode[i - 1] == 22 || contourCode[i - 1] == 33))) {\r\n                score++;\r\n            }\r\n        }\r\n    }\r\n    \r\n  return score;\r\n}\r\n\r\n/* This function returns a positive score: adds a point then same contours are repeated every other note*/\r\nexport function multiDirectionContour(contourCode) {\r\n    var score = 0.0;\r\n    if (undefined !== contourCode && contourCode.length) {\r\n        // adding points when patterns are repeated every other note or every other 2 notes\r\n        for (let i = 1; i < contourCode.length - 1; i++) {\r\n            if (contourCode[i - 1] == contourCode[i + 1]) {\r\n                score++;\r\n            }\r\n        }\r\n        for (let i = 1; i < contourCode.length - 2; i++) {\r\n            if (contourCode[i - 1] == contourCode[i + 2]) {\r\n                score++;\r\n            }\r\n        }\r\n    }\r\n  return score;\r\n}\r\n\r\n\r\n// ------------------------------------ END functions used only to evaluate the melody at the end of the game -----------------------\r\n","import {synth, searchForNote, playMembrane} from './modules/sound';\r\nimport * as melodyEvaluator from './modules/melodyEvaluator';\r\n\r\n\r\n/* ****************************************************** MODEL ******************************************************* */\r\n\r\nvar dominosContainer = document.getElementById(\"dominosContainer\");\r\n\r\nconst colors = [\"rgb(255, 104, 222)\", \"rgb(60, 116, 9)\", \"rgb(123, 180, 255)\", \"rgb(114, 67, 13)\", \"rgb(217, 164, 4)\",\r\n                \"rgb(128, 21, 228)\", \"rgb(165, 29, 54)\", \"rgb(255, 115, 0)\", \"rgb(0, 4, 255)\", \"rgb(207, 178, 143)\",\r\n                \"rgb(242, 242, 242)\", \"rgb(93, 93, 107)\", \"rgb(255, 163, 235)\", \"rgb(106, 206, 13)\", \"rgb(181, 214, 255)\",\r\n                \"rgb(201, 115, 17)\", \"rgb(242, 205, 19)\", \"rgb(184, 109, 255)\", \"rgb(217, 72, 98)\"];\r\nvar lowerGrades = 6; /* 6 grandes below C4 */\r\nlet delay = 0; /* sets the timing for the animation of the falling tiles */\r\n\r\n// arrays to be filled with tips shown in green and red post-it\r\nvar pros = [\"GOOD JOB!\"];\r\nvar cons = [\"FOR THE NEXT TIME:\"];\r\n\r\n// function to get parameters from URL\r\nfunction parseGetVars() {\r\n  let res = [];\r\n  let params = new URLSearchParams(document.location.search.substring(1));\r\n  let result = params.get(\"result\");\r\n  res[0] = result;\r\n  return res;\r\n}\r\n\r\nvar params = parseGetVars();\r\n\r\nvar resultString = params[0].split(\"_\"); // in this way I have again an array with all the grades\r\nvar result = [];\r\n\r\nfor(let i=0; i<resultString.length; i++){\r\n  result.push(parseInt(resultString[i]));\r\n}\r\n\r\n\r\n/* *****************************************************  VIEW  ********************************************************** */\r\n\r\n/* plays the melody built in the game  */\r\nconst playMelody = document.getElementById(\"playMelody\");\r\nplayMelody.addEventListener(\"click\", function() {\r\n  play_melody(result);\r\n})\r\n\r\nfunction play_melody(result){\r\n  let time = 0.5;\r\n  const now = Tone.now();\r\n  cleanDominos();\r\n      for(let i=0 ; i<result.length; i++){\r\n          const domino = createDomino(result[i]);\r\n          dominosContainer.appendChild(domino);\r\n          let grade = result[i];\r\n          let index = searchForNote[0].indexOf(grade);\r\n          let note = searchForNote[1][index];\r\n          synth.triggerAttackRelease(note, \"8n\", now + time);\r\n          time += 0.5;\r\n      }\r\n}\r\n\r\n/* DOMINO ANIMATION */\r\nfunction cleanDominos(){\r\n  while (dominosContainer.lastElementChild) {\r\n    dominosContainer.removeChild(dominosContainer.lastElementChild);\r\n  }\r\n  delay=0;\r\n}\r\n\r\nfunction createDomino(resultElement){\r\n  let piece = document.createElement(\"li\");\r\n  piece.classList.add(\"domino\");\r\n  let grade = resultElement;\r\n  let index = searchForNote[0].indexOf(grade);\r\n  let note = searchForNote[1][index];\r\n  piece.textContent = note;\r\n  let color = colors[grade+lowerGrades];\r\n  piece.style.backgroundColor = color;\r\n  delay += 0.5;\r\n  piece.style.animationDelay = delay+\"s\";\r\n  return piece;\r\n}\r\n\r\n/* creates the text in the two post-it taking strings from pros and cons arrays */\r\nfunction writeTips() {\r\n  const positive = document.querySelector(\"#pros\");\r\n  const negative = document.querySelector(\"#cons\");\r\n\r\n  positive.innerHTML = \"\";\r\n  for (let i = 0; i < pros.length; i++) {\r\n    positive.innerHTML += pros[i];\r\n    positive.innerHTML += \"<br>\";\r\n  }\r\n\r\n  negative.innerHTML = \"\";\r\n  for (let i = 0; i < cons.length; i++) {\r\n    negative.innerHTML += cons[i];\r\n    negative.innerHTML += \"<br>\";\r\n  }\r\n}\r\n\r\n\r\n/* SCORE BAR */\r\nconst GOOD_THRESHOLD = 50;\r\nconst EXCELLENT_THRESHOLD = 80;\r\n\r\nconst COLOR_CODES = {\r\n  bad: {\r\n    color: \"rgb(214, 71, 71)\"\r\n  },\r\n  good: {\r\n    color: \"rgb(255, 219, 58)\",\r\n    threshold: GOOD_THRESHOLD\r\n  },\r\n  excellent: {\r\n    color: \"rgb(61, 180, 61)\",\r\n    threshold: EXCELLENT_THRESHOLD\r\n  }\r\n};\r\n\r\nvar i = 0;\r\n\r\n\r\nfunction moveScoreBar() {\r\n  if (i == 0) {\r\n    i = 1;\r\n    var elem = document.getElementById(\"myBar\");\r\n    var width = 1;\r\n    var id = setInterval(frame, 50); /* duration of loading bar */\r\n    function frame() {\r\n\t\t\tif(width >= score) {\r\n        clearInterval(id);\r\n        i = 0;\r\n      } else {\r\n        width++;\r\n        setColor(width);\r\n        elem.style.width = width + \"%\";\r\n        elem.innerHTML = width + \"%\";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction setColor(width) {\r\n  const { excellent, good, bad } = COLOR_CODES;\r\n  if (width >= excellent.threshold) {\r\n    document.getElementById(\"myBar\").style.backgroundColor = excellent.color;\r\n  } else if (width >= good.threshold) {\r\n    document.getElementById(\"myBar\").style.backgroundColor = good.color;\r\n  }\r\n}\r\n\r\n/*  RENDER  */\r\nfunction firstPainfulRender() {\r\n    moveScoreBar();\r\n    writeTips();\r\n}\r\n\r\n//************************************************** CONTROLLER **************************************************\r\n\r\n/* retry button that redirects to the mode selection */\r\nconst retryButton = document.getElementById(\"backToModeSelection\");\r\n\r\nretryButton.addEventListener(\"click\", function() {\r\n  playMembrane();\r\n  setTimeout(function() {location.replace(\"modeSelection.html\")}, 700);\r\n})\r\n\r\n/* ------------- SCORE EVALUATION SYSTEM -------------- */\r\n\r\nfunction finalEvaluateMelody(melody) {\r\n\r\n  // BEGIN AND END, DIFFERENT NOTES\r\n  var begin = melodyEvaluator.beginOnTonic(melody);\r\n  var end = melodyEvaluator.endOnTonic(melody);\r\n  var diffNotes = melodyEvaluator.differentNotes(melody);\r\n\r\n  // CONTOUR\r\n  var contour = melodyEvaluator.findContour(melody);\r\n  var negContour = melodyEvaluator.oneDirectionContour(contour);\r\n  var posContour = melodyEvaluator.multiDirectionContour(contour);\r\n\r\n  // LEAPS\r\n  var wideLeaps = melodyEvaluator.tooWideLeaps(melody);\r\n  var meanDistance = melodyEvaluator.meanOfDistances(melody);\r\n  var sameDirLeaps = melodyEvaluator.sameDirectionLeaps(melody);\r\n  var neighNotes = melodyEvaluator.neighbourNotes(melody);\r\n  var notNeighNotes = melodyEvaluator.notNeighbourNotes(melody);\r\n\r\n  // MESSAGES\r\n\r\n  // if the melody is to short\r\n  if (melody.length == 1) {\r\n      cons.push(\"You placed no tiles! Try to place at least 3!\");\r\n  } else if (melody.length == 2) {\r\n      cons.push(\"You only placed one tile! Try to place at least 3!\");\r\n  } else if (melody.length == 3) {\r\n      cons.push(\"You only placed 2 tiles! Try to place at least 3!\");\r\n  } else if (diffNotes == 1) {\r\n      cons.push(\"You repeated only one note!\");\r\n  } else {\r\n    // if the melody is long enough\r\n    if (melody.length > 2 && melody.length < 7) {\r\n        cons.push(\"The melody is a little short...\");\r\n    } else if (melody.length > 7) {\r\n        pros.push(\"You placed many tiles!\");\r\n    }\r\n\r\n    // begin and end on tonic\r\n    if (begin == 0 && end == 0) {\r\n        pros.push(\"Great, your melody begins and ends on the tonic\");\r\n    } else if (begin == 0) {\r\n        pros.push(\"Great, your melody begins on the tonic\");\r\n    } else if (end == 0) {\r\n        pros.push(\"Your melody ends on the tonic, that's awesome!\");\r\n    } else {\r\n        cons.push(\"Try to end the melody on the tonic!\");\r\n    }\r\n\r\n\r\n    // if to many notes are equal to each other\r\n    if (diffNotes < 4) {\r\n        cons.push(\"You didn't use many different notes...\");\r\n    }\r\n\r\n    // contour\r\n    if (negContour > 2) {\r\n        cons.push(\"Try to make the contour of the melody more interesting!\");\r\n    }\r\n\r\n    else if (posContour < 4) {\r\n        cons.push(\"Try to make the contour of the melody more interesting!\");\r\n    }\r\n\r\n    if (posContour > 3) {\r\n        pros.push(\"You used various patterns and repeated them!\");\r\n    }\r\n\r\n    // leaps\r\n    if (wideLeaps > 2) {\r\n        cons.push(\"There are quite a few very wide leaps, better avoid them!\");\r\n    } else {\r\n        pros.push(\"There aren't many wide leaps!\");\r\n    }\r\n\r\n    if (meanDistance > 5) {\r\n        cons.push(\"The melody could be more linear...\");\r\n    }\r\n\r\n    if (sameDirLeaps > 2) {\r\n        cons.push(\" After big leaps, try to go in the opposite direction to balance everything!\");\r\n    }\r\n\r\n    if (neighNotes > 3 * notNeighNotes) {\r\n        cons.push(\"You mostly used neighbour notes! Use leaps too!\");\r\n    } else if (notNeighNotes > 3 * neighNotes) {\r\n        cons.push(\"You did not use many neighbour notes, try to insert a few!\");\r\n    } else {\r\n        pros.push(\"You balanced nicely neighbour and not neighbour notes\");\r\n    }\r\n\r\n  }\r\n\r\n  // TOTAL POINTS\r\n  var indivScores = [];\r\n  // each aspect of the game is given a score from 0 to 100. The score will be the mean of them.\r\n\r\n  // [0] = length of the melody\r\n  if (melody.length < 4) {\r\n      indivScores[0] = 0;\r\n  } else if (melody.length < 7) {\r\n      indivScores[0] = 1;\r\n  } else if (melody.length < 10) {\r\n      indivScores[0] = melody.length * 10;\r\n  } else { indivScores[0] = 100; }\r\n\r\n  // [1] = begin and end on tonic; not enough different notes\r\n  indivScores[1] = 90;\r\n  if (begin == 0) { indivScores[1] += 10; }\r\n  if (end == 1) { indivScores[1] -= 10; }\r\n  let diff = 0;\r\n  if (melody.length < 12) {\r\n    diff = Math.abs(Math.round(diffNotes - 1.8 * Math.sqrt(melody.length)));\r\n  } else if (melody.length >= 12) {\r\n    diff = Math.abs(Math.round(diffNotes - 2 * Math.sqrt(melody.length)));\r\n  }\r\n  indivScores[1] -= diff * 10;\r\n\r\n  // [2] = contour\r\n  indivScores[2] = 50 - 10 * negContour + 5 * posContour;\r\n  if (indivScores[2] < 0)\r\n    indivScores[2] = 0;\r\n  else if (indivScores[2] > 100)\r\n    indivScores[2] = 100;\r\n\r\n    // [3] = leaps\r\n  if (meanDistance < 2)\r\n     indivScores[3] = 0;\r\n  else {\r\n    if (meanDistance < 7)\r\n      indivScores[3] = 100;\r\n    else \r\n      indivScores[3] = 50;\r\n      \r\n    indivScores[3] -= wideLeaps * 4;\r\n    indivScores[3] -= sameDirLeaps * 2;\r\n    if (neighNotes > 3 * notNeighNotes) \r\n      indivScores[3] -= 60;\r\n    if (notNeighNotes > 3 * neighNotes) \r\n      indivScores[3] -= 60;  \r\n  }\r\n\r\n  var score = computeScore(indivScores[0], indivScores[1], indivScores[2], indivScores[3]);\r\n\r\n  if (score > 100)\r\n    score = 100;\r\n\r\n  return score\r\n}\r\n\r\nfunction computeScore(length, diffnotes, countour, leaps) {\r\n  var a = 0.2, b = 0.2, c = 0.3, d = 0.3;\r\n  \r\n  if (length == 0) {\r\n    a = 1;\r\n    b = 0;\r\n    c = 0;\r\n    d = 0;\r\n  }\r\n  else if (leaps == 0) {\r\n    a = 0.1;\r\n    b = 0.1;\r\n    c = 0.1;\r\n    d = 0.7;\r\n  }\r\n\r\n  return a * length + b * diffnotes + c * countour + d * leaps\r\n}\r\n\r\nvar score = finalEvaluateMelody(result);\r\n\r\n\r\nfirstPainfulRender();"]}