{"version":3,"sources":["modules/timer.js","modules/sound.js","modules/table.js","modules/melodyEvaluator.js","game.js"],"names":["FULL_DASH_ARRAY","WARNING_THRESHOLD","ALERT_THRESHOLD","COLOR_CODES","info","color","warning","threshold","alert","TIME_LIMIT","timePassed","timeLeft","timerInterval","remainingPathColor","onTimesUp","window","removeEventListener","askToReload","clearInterval","document","fPlayGame","submit","startTimer","setInterval","getElementById","innerHTML","formatTime","setCircleDasharray","setRemainingPathColor","time","minutes","Math","floor","seconds","classList","remove","add","calculateTimeFraction","rawTimeFraction","circleDasharray","toFixed","setAttribute","e","preventDefault","returnValue","addEventListener","synth","Tone","Synth","toDestination","poly","PolySynth","pluck","PluckSynth","membrane","MembraneSynth","metal","MetalSynth","volume","value","searchForNote","playChordsOnHeader","index","triggerAttackRelease","playNoteOnHeader","playPluck","playMembrane","errorSound","changeSetSound","interval","setTimeout","play_melody","result","now","i","length","grade","indexOf","note","add_rows","table","num","height","row","createElement","id","style","flexFlow","appendChild","horiz_box","box","dim1","dim2","width","vert_box","add_boxes","numRows","numBoxes","cntbox","j","textContent","draw_table","tableWidth","tableHeight","rowHeight","sameDirectionLastLeap","melody","l","abs","sign","neighbourNotes","score","notNeighbourNotes","tooWideLastLeap","meanOfDistances","tooWideLeaps","sameDirectionLeaps","beginOnTonic","endOnTonic","differentNotes","findContour","len","contourCode","code","oneDirectionContour","undefined","multiDirectionContour","modelLength","grades","setPieces","setBoxes","setCopy","pieceNum","colors","lowerGrades","barContainer","hiddenField","boxesPerRow","spaceBetweenBoxes","rows","copySpace","parseGetVars","res","params","URLSearchParams","location","search","substring","modal","get","difficulty","mode","createTile","color1","color2","tile","drag","event","tileUpper","backgroundColor","playNoteOnUpperTile","tileLower","playNoteOnLowerTile","rotate","createSet","index1","random","grade1","index2","grade2","piece","angle","push","firstPainfulRender","iterate_angle","n","ev","Array","from","currentTarget","parentNode","children","tempGrade","rotateCopy","change_set","removeChild","shiftKey","boxes","changeSet","onclick","playMelody","playTonic","rowCollection","rowChild","prevent_drop","dataTransfer","setData","target","drop_box","array","drop","cartoonFeedback","data","getData","addToSequence","pop","firstElementChild","copy","removeAttribute","splice","altKey","lastElementChild","copyTile","join","onGoingEvaluateMelody","feedback","cartoon","visibility","timer"],"mappings":"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","file":"game.21c3781b.js","sourceRoot":"..","sourcesContent":["\r\n// *************************************************** TIMER MODEL ***************************************************\r\nconst FULL_DASH_ARRAY = 283;\r\nconst WARNING_THRESHOLD = 10;\r\nconst ALERT_THRESHOLD = 5;\r\n\r\nconst COLOR_CODES = {\r\n  info: {\r\n    color: \"green\"\r\n  },\r\n  warning: {\r\n    color: \"orange\",\r\n    threshold: WARNING_THRESHOLD\r\n  },\r\n  alert: {\r\n    color: \"red\",\r\n    threshold: ALERT_THRESHOLD\r\n  }\r\n};\r\n\r\nconst TIME_LIMIT = 120;\r\nlet timePassed = 0;\r\nlet timeLeft = TIME_LIMIT;\r\nlet timerInterval = null;\r\nlet remainingPathColor = COLOR_CODES.info.color;\r\n\r\ndocument.getElementById(\"timer\").innerHTML = `\r\n<div class=\"base-timer\">\r\n  <svg class=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <g class=\"base-timer__circle\">\r\n      <circle class=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\"></circle>\r\n      <path\r\n        id=\"base-timer-path-remaining\"\r\n        stroke-dasharray=\"283\"\r\n        class=\"base-timer__path-remaining ${remainingPathColor}\"\r\n        d=\"\r\n          M 50, 50\r\n          m -45, 0\r\n          a 45,45 0 1,0 90,0\r\n          a 45,45 0 1,0 -90,0\r\n        \"\r\n      ></path>\r\n    </g>\r\n  </svg>\r\n  <span id=\"base-timer-label\" class=\"base-timer__label\">${formatTime(\r\n    timeLeft\r\n  )}</span>\r\n</div>\r\n`;\r\n\r\n\r\n// *************************************************** TIMER CONTROLLER ***************************************************\r\n\r\nfunction onTimesUp() {\r\n  window.removeEventListener('beforeunload', askToReload);\r\n  clearInterval(timerInterval);\r\n  document.fPlayGame.submit();\r\n}\r\n\r\nexport function startTimer() {\r\n  timerInterval = setInterval(() => {\r\n    timePassed = timePassed += 1;\r\n    timeLeft = TIME_LIMIT - timePassed;\r\n    document.getElementById(\"base-timer-label\").innerHTML = formatTime(\r\n      timeLeft\r\n    );\r\n    setCircleDasharray();\r\n    setRemainingPathColor(timeLeft);\r\n\r\n    if (timeLeft === 0) {\r\n      onTimesUp();\r\n    }\r\n  }, 1000);\r\n}\r\n\r\nfunction formatTime(time) {\r\n  const minutes = Math.floor(time / 60);\r\n  let seconds = time % 60;\r\n\r\n  if (seconds < 10) {\r\n    seconds = `0${seconds}`;\r\n  }\r\n\r\n  return `${minutes}:${seconds}`;\r\n}\r\n\r\nfunction setRemainingPathColor(timeLeft) {\r\n  const { alert, warning, info } = COLOR_CODES;\r\n  if (timeLeft <= alert.threshold) {\r\n    document\r\n      .getElementById(\"base-timer-path-remaining\")\r\n      .classList.remove(warning.color);\r\n    document\r\n      .getElementById(\"base-timer-path-remaining\")\r\n      .classList.add(alert.color);\r\n  } else if (timeLeft <= warning.threshold) {\r\n    document\r\n      .getElementById(\"base-timer-path-remaining\")\r\n      .classList.remove(info.color);\r\n    document\r\n      .getElementById(\"base-timer-path-remaining\")\r\n      .classList.add(warning.color);\r\n  }\r\n}\r\n\r\nfunction calculateTimeFraction() {\r\n  const rawTimeFraction = timeLeft / TIME_LIMIT;\r\n  return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);\r\n}\r\n\r\nfunction setCircleDasharray() {\r\n  const circleDasharray = `${(\r\n    calculateTimeFraction() * FULL_DASH_ARRAY\r\n  ).toFixed(0)} 283`;\r\n  document\r\n    .getElementById(\"base-timer-path-remaining\")\r\n    .setAttribute(\"stroke-dasharray\", circleDasharray);\r\n}\r\n\r\n\r\n// this function makes sure that the user doesn't lose all the progresses by accidentally refreshing the page\r\n// needed here because we need to remove it when the timer ends\r\nwindow.addEventListener('beforeunload', askToReload);\r\n\r\nexport function askToReload(e) {\r\n    e.preventDefault();\r\n    e.returnValue = '';\r\n}\r\n","/* ************************************************** MODEL **************************************************** */\r\n\r\n/* creation of synths with tone.js */\r\nexport const synth = new Tone.Synth().toDestination();\r\nconst poly = new Tone.PolySynth().toDestination();\r\nconst pluck = new Tone.PluckSynth().toDestination();\r\nconst membrane = new Tone.MembraneSynth().toDestination();\r\nconst metal = new Tone.MetalSynth().toDestination();\r\n\r\n/* regulation of volumes */\r\npluck.volume.value = -12;\r\nmembrane.volume.value = -12;\r\nmetal.volume.value = -12;\r\n\r\n/* dictionary used to get the correct note from of the grade */\r\nexport const searchForNote = [[-6, -5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12],\r\n                       [\"F#3\", \"G3\", \"G#3\", \"A3\", \"A#3\", \"B3\", \"C4\", \"C#4\", \"D4\", \"D#4\", \"E4\", \"F4\", \"F#4\", \"G4\", \"G#4\", \"A4\", \"A#4\", \"B4\", \"C5\"]];\r\n\r\n\r\n/* functions that creates the ambient sounds */\r\nexport function playChordsOnHeader(index) {\r\n    if (index == 0) poly.triggerAttackRelease([\"C4\", \"G4\"], \"8n\");\r\n    else if (index == 1) poly.triggerAttackRelease([\"D4\", \"F4\"], \"8n\");\r\n    else if (index == 2) poly.triggerAttackRelease([\"B3\", \"E4\", \"G4\"], \"8n\");\r\n    else if (index == 3) synth.triggerAttackRelease(\"C4\", \"4n\");\r\n}\r\n\r\nexport function playNoteOnHeader(index) {\r\n    if (index == 0) synth.triggerAttackRelease(\"C4\", \"8n\");\r\n    else if (index == 1) synth.triggerAttackRelease(\"D4\", \"8n\");\r\n    else if (index == 2) synth.triggerAttackRelease(\"E4\", \"8n\");\r\n}\r\n\r\nexport function playPluck() {\r\n    pluck.triggerAttackRelease(\"C5\", \"16n\");\r\n}\r\n\r\nexport function playMembrane() {\r\n    membrane.triggerAttackRelease(\"C4\", \"16n\");\r\n}\r\n\r\nexport function errorSound() {\r\n    metal.triggerAttackRelease(\"C5\", \"32n\");\r\n}\r\n\r\nexport function changeSetSound() {\r\n    let interval = setInterval(function () {pluck.triggerAttackRelease(\"C6\", \"32n\")}, 40);\r\n    setTimeout(function () {clearInterval(interval)}, 300);\r\n}\r\n\r\n/* function that plays back the melody built inside the game */\r\nexport function play_melody(result){\r\n  let time = 0;\r\n  const now = Tone.now()\r\n      for(let i=0 ; i<result.length; i++){\r\n          let grade = result[i];\r\n          let index = searchForNote[0].indexOf(grade);\r\n          let note = searchForNote[1][index];\r\n          synth.triggerAttackRelease(note, \"8n\", now + time);\r\n          time += 0.5;\r\n      }\r\n}\r\n","// The table is divided in sections, each section is a row containing some boxes\r\n\r\n\r\n// this function draws the row and adds them to the table\r\nfunction add_rows(table, num, height) {\r\n  for (let i = 0; i < num; i++) {\r\n      let row = document.createElement(\"div\");\r\n      row.classList.add(\"row\");\r\n      row.id = \"row\"+i;\r\n      row.style.height = height+\"px\";\r\n      if (i%2 == 0) {\r\n          row.style.flexFlow = \"row wrap\";\r\n      } else {\r\n          row.style.flexFlow = \"row-reverse wrap\";\r\n      }\r\n      table.appendChild(row);\r\n  }\r\n}\r\n\r\n\r\n//these functions draw the horizontal and vertical boxes\r\nfunction horiz_box(box, dim1, dim2) {\r\n  box.classList.add(\"box\");\r\n  box.style.width = dim2+\"px\";\r\n  box.style.height = dim1+\"px\";\r\n}\r\n\r\nfunction vert_box(box, dim1, dim2) {\r\n  box.classList.add(\"box\");\r\n  box.style.width = dim1+\"px\";\r\n  box.style.height = dim2+\"px\";\r\n\r\n}\r\n\r\n\r\n// this function adds the boxes to each single row\r\nfunction add_boxes(numRows, numBoxes, width, height) {\r\n  let cntbox = 0;\r\n\r\n  for (let i = 0; i < numRows; i++) {\r\n\r\n      let row = document.getElementById(\"row\"+i);\r\n\r\n      for (let j = 0; j < numBoxes-1; j++) {\r\n          let box = document.createElement(\"div\");\r\n          horiz_box(box, width, height);\r\n          box.textContent = cntbox;\r\n          box.id = cntbox;\r\n          cntbox++;\r\n          row.appendChild(box);\r\n      }\r\n\r\n      let box = document.createElement(\"div\");\r\n      vert_box(box, width, height);\r\n      box.textContent = cntbox;\r\n      box.id = cntbox;\r\n      cntbox++;\r\n      row.appendChild(box);\r\n  }\r\n}\r\n\r\n\r\n// this is the function that, by calling the previous ones, creates the table\r\nexport function draw_table(table, tableWidth, tableHeight, numRows, rowHeight, numBoxes, width, height) {\r\n  table.style.width = tableWidth+\"px\";\r\n  table.style.height = tableHeight+\"px\";\r\n  add_rows(table, numRows, rowHeight);\r\n  add_boxes(numRows, numBoxes, width, height)\r\n}\r\n","// ------------------------------------ functions used also to evaluate the melody during the game -----------------------\r\n\r\n\r\n/*This function returns the number of wide leaps (at least 1 sixth - 9 semitones) followed by a leap in the same direction*/\r\nexport function sameDirectionLastLeap(melody) {\r\n    var l = melody.length;\r\n    if (Math.abs(melody[l - 2] - melody[l - 1]) > 9 && (Math.sign(melody[l - 2] - melody[l - 1]) == Math.sign(melody[l - 1] - melody[l]))) {\r\n        return 1;\r\n    } else {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/* This function returns the number of consecutive neighbour notes*/\r\nexport function neighbourNotes(melody){\r\n  var score = 0.0;\r\n   for(let i=1; i<melody.length; i++){\r\n    if ( Math.abs(melody[i-1]-melody[i]) < 3 ) {\r\n      score ++;\r\n    }\r\n  }\r\n  return score;\r\n}\r\n\r\n/* This function returns the number of consecutive NOT neighbour notes*/\r\nexport function notNeighbourNotes(melody){\r\n  var score = 0.0;\r\n   for(let i=1; i<melody.length; i++){\r\n    if ( Math.abs(melody[i-1]-melody[i]) > 2 ) {\r\n      score ++;\r\n    }\r\n  }\r\n  return score;\r\n}\r\n\r\n/* This function returns 1 if the last added note is at more than an octave of distance, 0 otherwise*/\r\nexport function tooWideLastLeap(melody){\r\n  if (Math.abs(melody[melody.length-2]-melody[melody.length-1]) > 12) {\r\n    return 1;\r\n  }\r\n  else {\r\n    return 0;\r\n  }\r\n}\r\n\r\n/* This function returns the mean of the abs value of the jumps. Checks if there are too many wide oscillations in the melody (meaning many jumps)\r\nIf the mean value is more than a 5th, the melody is too oscillating*/\r\nexport function meanOfDistances(melody) {\r\n    var score = 0.0;\r\n    for (let i = 1; i < melody.length; i++) {\r\n        score += Math.abs(melody[i - 1] - melody[i]);\r\n    }\r\n    return score / (melody.length-1);\r\n}\r\n\r\n\r\n// ------------------------------------ END functions used also to evaluate the melody during the game -----------------------\r\n\r\n// ------------------------------------ functions used only to evaluate the melody at the end of the game -----------------------\r\n\r\n\r\n\r\n/* This function returns a negative score: returns the number of too wide leaps (over 1 octave). 1 ocatve is represented by a leap of 12 in our case. */\r\nexport function tooWideLeaps(melody){\r\n var score = 0.0;\r\n for(let i=1; i<melody.length-1; i++){\r\n   if ( Math.abs(melody[i-1]-melody[i]) > 12 ) {\r\n     score ++;\r\n   }\r\n }\r\n return score;\r\n}\r\n\r\n/*This function returns the number of wide leaps (at least 1 sixth - 9 semitones) followed by a leap in the same direction*/\r\nexport function sameDirectionLeaps(melody) {\r\n    var score = 0.0;\r\n    for (let i = 2; i < melody.length; i++) {\r\n        if (Math.abs(melody[i - 2] - melody[i - 1]) > 9 && (Math.sign(melody[i - 2] - melody[i - 1]) == Math.sign(melody[i - 1] - melody[i - 0]))) {\r\n            score++;\r\n        }\r\n    }\r\n    return score;\r\n}\r\n\r\n// -- FUNCTIONS ABOUT FIRST AND LAST NOTE -- //\r\n\r\n//returns 0 if the melody begins on the first grade [0], 1 otherwise\r\nexport function beginOnTonic(melody){\r\n  if (melody[0]==0) {\r\n    return 0;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\n//returns 0 if the melody ends on the first grade [0], 1 otherwise\r\nexport function endOnTonic(melody){\r\n  if (melody[melody.length-1]==0) {\r\n    return 0;\r\n  } else {\r\n    return 1;\r\n  }\r\n}\r\n\r\n/* This function counts how many different notes are there in the melody */\r\nexport function differentNotes(melody) {\r\n    let score = 0;\r\n\r\n    for (let i = 0; i < melody.length; i++) {\r\n        var j;\r\n        for (j = 0; j < i; j++)\r\n           if (melody[i] == melody[j])\r\n               break;\r\n   \r\n        if (i == j)\r\n            score += 1\r\n    }\r\n    return score;\r\n}\r\n\r\n\r\n\r\n// -- FUNCTIONS ABOUT CONTOUR -- //\r\n\r\n/* this function returns an evaluation of the melody so far based on the melody contour.*/\r\n/*\r\nThe melody is scanned to get the contour of every block of 3 notes. The possible contours are:\r\n11 RISING\r\n12 RISING - FLAT\r\n13 RISING - FALLING\r\n21 FLAT - RISING\r\n22 FLAT\r\n23 FLAT - FALLING\r\n31 FALLING - RISING\r\n32 FALLING - FLAT\r\n33 FALLING\r\n\r\nIf 3 contours with repeated same digits (11, 22, 33) are found consecutive of each other, (eg: 11 - 11 means there are 4 notes all in a ascending scale) there is a penalty in the score.\r\nIn other cases, if the consecutive are inversions (eg: 12 - 21) it means that vore varying patterns are repeated, and that's good\r\n*/\r\nexport function findContour(melody){\r\n  var len = melody.length;\r\n  if (len<3){\r\n    return;\r\n  }\r\n  var contourCode = [];\r\n  // scanning trough the melody to detect patterns.\r\n  for(let i=1; i<len-1; i++){ //i goes from the second note to the second-last note\r\n    var code;\r\n    if (melody[i-1]<melody[i]) code = 10; // first note is lower than second: rising\r\n    else if (melody[i-1]==melody[i]) code = 20; // first note is same as second: flat\r\n    else if (melody[i-1]>melody[i]) code = 30; // first note is higher than second: falling\r\n    if (melody[i]<melody[i+1]) code = code + 1; // second note is lower than third: rising\r\n    else if (melody[i]==melody[i+1]) code = code + 2; // second note is same as third: flat\r\n    else if (melody[i]>melody[i+1]) code = code + 3;// second note is higher than third: falling\r\n    contourCode[i-1] = code;\r\n  }\r\n\r\n  return contourCode;\r\n}\r\n\r\n/* This function returns a negative score: subtracts a point every time 4 notes are in the same contour (rising - flat - falling) */\r\nexport function oneDirectionContour(contourCode) {\r\n    var score = 0.0;\r\n    if (undefined !== contourCode && contourCode.length) {\r\n        // remove points when patterns with not repeated digits are placed next to each other\r\n        for (let i = 1; i < contourCode.length; i++) {\r\n            if ((contourCode[i - 1] == contourCode[i] && (contourCode[i - 1] == 11 || contourCode[i - 1] == 22 || contourCode[i - 1] == 33))) {\r\n                score++;\r\n            }\r\n        }\r\n    }\r\n    \r\n  return score;\r\n}\r\n\r\n/* This function returns a positive score: adds a point then same contours are repeated every other note*/\r\nexport function multiDirectionContour(contourCode) {\r\n    var score = 0.0;\r\n    if (undefined !== contourCode && contourCode.length) {\r\n        // adding points when patterns are repeated every other note or every other 2 notes\r\n        for (let i = 1; i < contourCode.length - 1; i++) {\r\n            if (contourCode[i - 1] == contourCode[i + 1]) {\r\n                score++;\r\n            }\r\n        }\r\n        for (let i = 1; i < contourCode.length - 2; i++) {\r\n            if (contourCode[i - 1] == contourCode[i + 2]) {\r\n                score++;\r\n            }\r\n        }\r\n    }\r\n  return score;\r\n}\r\n\r\n\r\n// ------------------------------------ END functions used only to evaluate the melody at the end of the game -----------------------\r\n","import * as timer from './modules/timer';\r\nimport {play_melody, synth, searchForNote, errorSound, changeSetSound} from './modules/sound';\r\nimport {draw_table} from './modules/table';\r\nimport { meanOfDistances, sameDirectionLastLeap, neighbourNotes, notNeighbourNotes, tooWideLastLeap,  } from './modules/melodyEvaluator';\r\n\r\n\r\n//------------------------------------------------------- MODEL -----------------------------------------------------------\r\nconst modelLength = 10; // number of tiles in the bar\r\nvar grades = []; // grades of the game, they are based on the mode selected by the user\r\nvar setPieces = []; // dictionary of the tiles  in the bar with the two grades and the orientation associated\r\nvar setBoxes = []; // dictionary of the tiles  in the board with the two grades and the orientation associated\r\nvar setCopy = []; // tile contained in copySpace with the two grades and the orientation associated\r\nvar pieceNum = -1; // var needed to remove the dropped tile from setPieces array\r\nconst colors = [\"rgb(255, 104, 222)\", \"rgb(60, 116, 9)\", \"rgb(123, 180, 255)\", \"rgb(114, 67, 13)\", \"rgb(217, 164, 4)\",\r\n                \"rgb(128, 21, 228)\", \"rgb(165, 29, 54)\", \"rgb(255, 115, 0)\", \"rgb(0, 4, 255)\", \"rgb(207, 178, 143)\",\r\n                \"rgb(242, 242, 242)\", \"rgb(93, 93, 107)\", \"rgb(255, 163, 235)\", \"rgb(106, 206, 13)\", \"rgb(181, 214, 255)\",\r\n                \"rgb(201, 115, 17)\", \"rgb(242, 205, 19)\", \"rgb(184, 109, 255)\", \"rgb(217, 72, 98)\"];\r\n\r\nvar lowerGrades = 6; // used to choose the correct index from colors by translating the grades that start from -6\r\nconst barContainer = document.getElementById(\"bar\");\r\nvar result = [] // array with the sequence created: everytime I add a piece to the board, the tile grade is added to result\r\n\r\n// a new element hidden in the form to pass the result as a URL parameter\r\nvar hiddenField = document.createElement(\"input\");\r\nhiddenField.setAttribute(\"type\", \"hidden\");\r\nhiddenField.setAttribute(\"name\", \"result\");\r\ndocument.getElementById(\"fPlayGame\").appendChild(hiddenField);\r\n\r\n//boxes\r\nconst boxesPerRow = 8;\r\nconst dim1 = 60;\r\nconst dim2 = 120;\r\nconst spaceBetweenBoxes = 5;\r\n\r\n//table\r\nconst rows = 3;\r\nconst rowHeight = dim2 + 10; //10 is padding\r\nconst tableWidth = boxesPerRow*dim2 + (boxesPerRow-1)*spaceBetweenBoxes + 20; //40 is padding\r\nconst tableHeight = rows * rowHeight;\r\nconst table = document.getElementById(\"table\");\r\n\r\n//copyspace\r\nconst copySpace = document.getElementById(\"copySpace\");\r\n\r\n\r\n// function to get parameters from URL\r\n// URLSearchParams creates a sort of dictionary from the string given passed by the argument\r\nfunction parseGetVars() {\r\n  let res = [];\r\n  let params = new URLSearchParams(document.location.search.substring(1));\r\n  let modal = params.get(\"mode\");\r\n  let difficulty = params.get(\"difficulty\");\r\n  res[0] = modal;\r\n  res[1] = difficulty;\r\n  return res;\r\n}\r\n\r\nvar params = parseGetVars();\r\nvar mode = params[0];\r\nvar difficulty = params[1];\r\n\r\n\r\n// Filling grades according to the mode received by the select input in the form by the user\r\nswitch(mode){\r\n  case \"Ionian\":\r\n    grades = [-5,-3,-1,0,2,4,5,7,9,11,12]\r\n    break;\r\n  case \"Dorian\":\r\n    grades = [-5,-3,-2,0,2,3,5,7,9,10,12]\r\n    break;\r\n  case \"Phrygian\":\r\n    grades = [-6,-4,-2,-0,1,3,5,7,8,10,12]\r\n    break;\r\n  case \"Lydian\":\r\n    grades = [-5,-3,-1,0,2,4,6,7,9,11,12]\r\n  case \"Myxolydian\":\r\n    grades = [-5,-3,-2,0,2,4,5,7,9,10,12]\r\n  case \"Aeolian\":\r\n    grades = [-5,-4,-2,0,2,3,5,7,8,10,12]\r\n  case \"Locrian\":\r\n    grades = [-6,-4,-2,0,1,3,5,6,8,10,12]\r\n}\r\n\r\n//---------------------------------------------- END of MODEL --------------------------------------------------------------\r\n\r\n//----------------------------------------------- VIEW --------------------------------------------------------------\r\n\r\n// Creates a tile of the specified color\r\nfunction createTile(color1,color2,i) {\r\n  let tile = document.createElement(\"div\");\r\n  tile.classList.add(\"tile_v\");\r\n  tile.id = i;   // id needed in the drag function\r\n  tile.setAttribute(\"draggable\", true)\r\n  tile.addEventListener(\"dragstart\",  function() {pieceNum = drag(event)})\r\n\r\n  // creating two subclasses with the lower and upper part that are of two different colors\r\n  const tileUpper = document.createElement(\"div\");\r\n  tileUpper.classList.add(\"tileUpper\");\r\n  if (difficulty == \"expert\") {\r\n    tileUpper.style.backgroundColor = \"#FFF4E9\";\r\n  }\r\n  else if (difficulty == \"normal\") {\r\n    tileUpper.style.backgroundColor = color1;\r\n  }\r\n  tileUpper.addEventListener(\"click\", playNoteOnUpperTile);\r\n  const tileLower = document.createElement(\"div\");\r\n  tileLower.classList.add(\"tileLower\");\r\n  if (difficulty == \"expert\") {\r\n    tileLower.style.backgroundColor = \"#FFF4E9\";\r\n  }\r\n  else if (difficulty == \"normal\") {\r\n    tileLower.style.backgroundColor = color2;\r\n  }\r\n\r\n  tileLower.addEventListener(\"click\", playNoteOnLowerTile);\r\n\r\n\r\n  tile.appendChild(tileUpper);\r\n  tile.appendChild(tileLower);\r\n\r\n\r\n  tile.addEventListener(\"dblclick\", rotate);\r\n\r\n  return tile\r\n\r\n}\r\n\r\nfunction createSet() {\r\n\r\n  for (let i = 0; i < modelLength; i++) { // for each element of the model, so of the bar\r\n    let index1 = Math.floor(Math.random() * grades.length);\r\n    let grade1 = grades[index1];\r\n    let color1 = colors[grade1+lowerGrades]; \r\n    // lowerGrades is used to translate the grade number, that starts from -6, to number 0, that is the first element of the\r\n    // array colors. In this way there's a one to one relation between colors and grades.\r\n    let index2 = Math.floor(Math.random() * grades.length);\r\n    let grade2 = grades[index2];\r\n    let color2 = colors[grade2+lowerGrades];\r\n    const tile = createTile(color1,color2,i) // Create the actual tile of that two colors chosen in a randomic way\r\n    barContainer.appendChild(tile) // Add it to the bar div\r\n    let piece = {\r\n      // at the beginning the tiles are always in vertical position and by default grade1 is assigned to\r\n      // the upper part of the tile, grade2 is assigned to the lower part of the tile\r\n      tile: tile,\r\n      grade1: grade1,\r\n      grade2: grade2,\r\n      angle: 0,\r\n    }\r\n\r\n    setPieces.push(piece)\r\n  }\r\n\r\n}\r\n\r\n\r\n// RENDER\r\nfunction firstPainfulRender() {\r\n  createSet();\r\n  draw_table(table, tableWidth, tableHeight, rows, rowHeight, boxesPerRow, dim1, dim2); // take a look at table.js\r\n}\r\n\r\n//----------------------------------------------- END of VIEW --------------------------------------------------------------\r\n\r\n\r\n//----------------------------------------------- CONTROLLER --------------------------------------------------------------\r\nfirstPainfulRender()\r\n\r\n//funzione che calcola il nuovo angolo da dare al piece ruotato\r\nfunction iterate_angle(n) {\r\n  n += 90;\r\n  n = n % 360;\r\n  return n;\r\n}\r\n\r\n// rotates the tile by 90° each time\r\nfunction rotate(ev){\r\n  let i =  Array.from(ev.currentTarget.parentNode.children).indexOf(ev.currentTarget)\r\n  // at the beginning I have [grade1, grade2]\r\n  if (setPieces[i].angle == 0) {\r\n    ev.currentTarget.classList.remove(\"tile_v\");\r\n    ev.currentTarget.classList.add(\"tile_h\");\r\n    ev.currentTarget.style.flexFlow = \"row-reverse wrap\";\r\n    // swapping grade1 and grade2 to have [grade2, grade1]\r\n    let tempGrade = setPieces[i].grade1;\r\n    setPieces[i].grade1 = setPieces[i].grade2;\r\n    setPieces[i].grade2 = tempGrade;\r\n  }\r\n  if (setPieces[i].angle == 90) {\r\n    ev.currentTarget.classList.remove(\"tile_h\");\r\n    ev.currentTarget.classList.add(\"tile_v\");\r\n    ev.currentTarget.style.flexFlow = \"column-reverse wrap\";\r\n    // still having [grade2, grade1]\r\n  }\r\n  if (setPieces[i].angle == 180) {\r\n    ev.currentTarget.classList.remove(\"tile_v\");\r\n    ev.currentTarget.classList.add(\"tile_h\");\r\n    ev.currentTarget.style.flexFlow = \"row wrap\";\r\n    // swapping to [grade1, grade2]\r\n    let tempGrade = setPieces[i].grade1;\r\n    setPieces[i].grade1 = setPieces[i].grade2;\r\n    setPieces[i].grade2 = tempGrade;\r\n  }\r\n  if (setPieces[i].angle == 270) {\r\n    ev.currentTarget.classList.remove(\"tile_h\");\r\n    ev.currentTarget.classList.add(\"tile_v\");\r\n    ev.currentTarget.style.flexFlow = \"column wrap\";\r\n    // ending up with [grade1, grade2]\r\n  }\r\n  setPieces[i].angle = iterate_angle(setPieces[i].angle);\r\n}\r\n\r\n\r\nfunction rotateCopy(ev) {\r\n  if (setCopy[0].angle == 0) {\r\n    ev.currentTarget.classList.remove(\"tile_v\");\r\n    ev.currentTarget.classList.add(\"tile_h\");\r\n    ev.currentTarget.style.flexFlow = \"row-reverse wrap\";\r\n    // I want to swap grade1 and grade2 to have [grade2, grade1]\r\n    let tempGrade = setCopy[0].grade1;\r\n    setCopy[0].grade1 = setCopy[0].grade2;\r\n    setCopy[0].grade2 = tempGrade;\r\n  }\r\n  if (setCopy[0].angle == 90) {\r\n    ev.currentTarget.classList.remove(\"tile_h\");\r\n    ev.currentTarget.classList.add(\"tile_v\");\r\n    ev.currentTarget.style.flexFlow = \"column-reverse wrap\";\r\n    // still having [grade2, grade1]\r\n  }\r\n  if (setCopy[0].angle == 180) {\r\n    ev.currentTarget.classList.remove(\"tile_v\");\r\n    ev.currentTarget.classList.add(\"tile_h\");\r\n    ev.currentTarget.style.flexFlow = \"row wrap\";\r\n    // swapping to [grade1, grade2]\r\n    let tempGrade = setCopy[0].grade1;\r\n    setCopy[0].grade1 = setCopy[0].grade2;\r\n    setCopy[0].grade2 = tempGrade;\r\n  }\r\n  if (setCopy[0].angle == 270) {\r\n    ev.currentTarget.classList.remove(\"tile_h\");\r\n    ev.currentTarget.classList.add(\"tile_v\");\r\n    ev.currentTarget.style.flexFlow = \"column wrap\";\r\n    // ending up with [grade1, grade2]\r\n  }\r\n  setCopy[0].angle = iterate_angle(setCopy[0].angle);\r\n}\r\n\r\n\r\nfunction change_set() {\r\n  changeSetSound();\r\n  for (let i = 0; i < setPieces.length; i++) { // For each element of the model, so of the bar\r\n     barContainer.removeChild(setPieces[i].tile)\r\n  }\r\n  // setPieces must be empty again, because it is the dictionary contaning the tiles in the bar\r\n  setPieces = [];\r\n  createSet();\r\n}\r\n\r\nchangeSet.onclick = change_set;\r\n\r\ndocument.getElementById(\"finishGame\").onclick = function(){\r\n  window.removeEventListener('beforeunload', askToReload);\r\n}\r\n\r\nplayMelody.onclick = function() {\r\n  play_melody(result);\r\n}\r\n\r\nplayTonic.addEventListener(\"click\", function() {\r\n  synth.triggerAttackRelease(\"C4\", \"8n\");\r\n})\r\n\r\n\r\n// the function goes into the target of the click event and lookes for the color, finds the index of the color inside the array of colors,\r\n// finds the note correspondent to the index found, triggers the synth with that same note\r\nfunction playNoteOnUpperTile() {\r\n  if (event.shiftKey) {\r\n    let grade;\r\n\r\n    if (event.currentTarget.parentNode.parentNode.id === \"bar\") {\r\n      let angle = setPieces[Array.from(event.currentTarget.parentNode.parentNode.children).indexOf(event.currentTarget.parentNode)].angle;\r\n      if (angle == 0 || angle == 270)\r\n        grade = setPieces[Array.from(event.currentTarget.parentNode.parentNode.children).indexOf(event.currentTarget.parentNode)].grade1;\r\n      else if (angle == 90 || angle == 180)\r\n        grade = setPieces[Array.from(event.currentTarget.parentNode.parentNode.children).indexOf(event.currentTarget.parentNode)].grade2;\r\n    }\r\n    else if (event.currentTarget.parentNode.parentNode.parentNode.parentNode.id === \"table\") {\r\n      let angle = setBoxes[boxes.indexOf(event.currentTarget.parentNode.parentNode)].angle;\r\n      if (angle == 0 || angle == 270)\r\n        grade = setBoxes[boxes.indexOf(event.currentTarget.parentNode.parentNode)].grade1;\r\n      else if (angle == 90 || angle == 180)\r\n      grade = setBoxes[boxes.indexOf(event.currentTarget.parentNode.parentNode)].grade2;\r\n    }\r\n    else if (event.currentTarget.parentNode.parentNode.id ===\"copySpace\") {\r\n      let angle = setCopy[0].angle;\r\n      if (angle == 0 || angle == 270)\r\n        grade = setCopy[0].grade1;\r\n      else if (angle == 90 || angle == 180)\r\n        grade = setCopy[0].grade2;\r\n    }\r\n\r\n    let index = searchForNote[0].indexOf(grade);\r\n    let note = searchForNote[1][index];\r\n\r\n    synth.triggerAttackRelease(note, \"8n\");\r\n  }\r\n}\r\n\r\nfunction playNoteOnLowerTile() {\r\n  if (event.shiftKey) {\r\n    let grade;\r\n\r\n    if (event.currentTarget.parentNode.parentNode.id === \"bar\") {\r\n      let angle = setPieces[Array.from(event.currentTarget.parentNode.parentNode.children).indexOf(event.currentTarget.parentNode)].angle;\r\n      if (angle == 0 || angle == 270)\r\n        grade = setPieces[Array.from(event.currentTarget.parentNode.parentNode.children).indexOf(event.currentTarget.parentNode)].grade2;\r\n      else if (angle == 90 || angle == 180)\r\n        grade = setPieces[Array.from(event.currentTarget.parentNode.parentNode.children).indexOf(event.currentTarget.parentNode)].grade1;\r\n    }\r\n    else if (event.currentTarget.parentNode.parentNode.parentNode.parentNode.id === \"table\") {\r\n      let angle = setBoxes[boxes.indexOf(event.currentTarget.parentNode.parentNode)].angle;\r\n      if (angle == 0 || angle == 270)\r\n        grade = setBoxes[boxes.indexOf(event.currentTarget.parentNode.parentNode)].grade2;\r\n      else if (angle == 90 || angle == 180)\r\n        grade = setBoxes[boxes.indexOf(event.currentTarget.parentNode.parentNode)].grade1;\r\n    }\r\n    else if (event.currentTarget.parentNode.parentNode.id === \"copySpace\") {\r\n      let angle = setCopy[0].angle;\r\n      if (angle == 0 || angle == 270)\r\n        grade = setCopy[0].grade2;\r\n      else if (angle == 90 || angle == 180)\r\n        grade = setCopy[0].grade1;\r\n    }\r\n\r\n    let index = searchForNote[0].indexOf(grade);\r\n    let note = searchForNote[1][index];\r\n\r\n    synth.triggerAttackRelease(note, \"8n\");\r\n  }\r\n}\r\n\r\n// ------------------------------------------------- DRAG and DROP --------------------------------\r\n// creating the \"boxes\" array to give to the boxes created in html the drop functionality\r\nlet rowCollection = document.getElementById(\"table\").children;\r\nlet boxes = [];\r\nfor (let i = 0; i < rows; i++) {\r\n    let rowChild = rowCollection[i].children;\r\n    for (let j = 0; j < boxesPerRow; j++) {\r\n        boxes.push(rowChild[j]);\r\n    }\r\n}\r\n\r\n\r\n// PreventDefault() prevents the default action of the browser of the event to which it is associated\r\nfunction prevent_drop(ev) {\r\n  ev.preventDefault();\r\n}\r\n\r\n// Dato l'evento drag su un elemento ne raccoglie i dati avendo come argomento l'ID dell'elemento stesso.\r\n// Inoltre, draggando una tessera, raccoglie l'indice della stessa passando per il parent \"bar\"\r\nfunction drag(ev) {\r\n  ev.dataTransfer.setData(\"text\", ev.target.id);\r\n  if (ev.target.id == \"11\")\r\n    return 11;\r\n  if (ev.target.id != \"11\") {\r\n    let i =  Array.from(ev.currentTarget.parentNode.children).indexOf(ev.currentTarget)\r\n    return i;\r\n  }\r\n}\r\n\r\n// assigning the eventListeners needed to allow the drop and removes the draggable attribute from the last tile,\r\n// only to the first element without childs of the array\r\nfunction drop_box(array) {\r\n  let i = 0;\r\n  while(array[i]) {\r\n    if (array[i-1]) {\r\n      array[i-1].children[0].setAttribute(\"draggable\", false);\r\n    }\r\n    if (array[i].children.length == 0) {\r\n      array[i].addEventListener(\"drop\", drop);\r\n      array[i].addEventListener(\"dragover\", prevent_drop);\r\n      break;\r\n    }\r\n    i++;\r\n  }\r\n}\r\ndrop_box(boxes);\r\n\r\n// given the drop event, it transfers the element in drag to the container element selected via id.\r\n// The splice on setPieces is needed to remove the dropped tile from the array to allow the function rotate to\r\n// keep working through the index pieceNum taken from the element \"bar\"\r\nfunction drop(ev) {\r\n\r\n  if (ev.target.children.length === 0) {\r\n    // checking if the box and the tile are both horizontal\r\n    if (pieceNum == 11) {\r\n      if (ev.target.style.width == dim2+\"px\" && (setCopy[0].angle == 90 || setCopy[0].angle == 270)) {\r\n        if((Math.floor((ev.target.id)/boxesPerRow))%2==0 && result.length != 0 && result[result.length-1]!=setCopy[0].grade1){\r\n          cartoonFeedback(\"Remember to match the color!\");\r\n        }else if((Math.floor((ev.target.id)/boxesPerRow))%2!=0 && result.length != 0 && result[result.length-1]!=setCopy[0].grade2){\r\n          cartoonFeedback(\"Remember to match the color!\");\r\n        }else{\r\n          ev.target.textContent= \"\";\r\n          ev.preventDefault();\r\n          var data = ev.dataTransfer.getData(\"text\");\r\n          ev.target.appendChild(setCopy[0].tile);\r\n          // putting the grades of the piece in addToSequence to create result, before removing the tile from setPieces\r\n          addToSequence(setCopy[0].grade1, setCopy[0].grade2,ev.target.id);\r\n          setBoxes.push(setCopy.pop());\r\n          ev.target.firstElementChild.removeEventListener(\"dblclick\", rotateCopy);\r\n          ev.target.removeEventListener(\"drop\", drop);\r\n          ev.target.removeEventListener(\"dragover\", prevent_drop);\r\n          ev.target.firstElementChild.addEventListener(\"click\", copy);\r\n          ev.target.firstElementChild.removeAttribute(\"id\");\r\n          copySpace.removeChild;\r\n          drop_box(boxes);\r\n        }\r\n      }\r\n      // checking if the box and the tile are both vertical\r\n      else if (ev.target.style.width == dim1+\"px\" && (setCopy[0].angle == 0 || setCopy[0].angle == 180)) {\r\n        if(result[result.length-1]!=setCopy[0].grade1){\r\n          cartoonFeedback(\"Remember to match the color!\");\r\n        }else{\r\n          ev.target.textContent =\"\";\r\n          ev.preventDefault();\r\n          var data = ev.dataTransfer.getData(\"text\");\r\n          ev.target.appendChild(setCopy[0].tile);\r\n          // putting the grades of the piece in addToSequence to create result, before removing the tile from setPieces\r\n          addToSequence(setCopy[0].grade1, setCopy[0].grade2,1);\r\n          setBoxes.push(setCopy.pop());\r\n          ev.target.firstElementChild.removeEventListener(\"dblclick\", rotateCopy);\r\n          ev.target.removeEventListener(\"drop\", drop);\r\n          ev.target.removeEventListener(\"dragover\", prevent_drop);\r\n          ev.target.firstElementChild.addEventListener(\"click\", copy);\r\n          ev.target.firstElementChild.removeAttribute(\"id\");\r\n          copySpace.removeChild\r\n          drop_box(boxes);\r\n        }\r\n      }else{\r\n        cartoonFeedback(\"Remember you can rotate the tile!\");\r\n      }\r\n    }\r\n\r\n    else {\r\n      if (ev.target.style.width == dim2+\"px\" && (setPieces[pieceNum].angle == 90 || setPieces[pieceNum].angle == 270)) {\r\n        if((Math.floor((ev.target.id)/boxesPerRow))%2==0 && result.length != 0 && result[result.length-1]!=setPieces[pieceNum].grade1){\r\n          cartoonFeedback(\"Remember to match the color!\");\r\n        }else if((Math.floor((ev.target.id)/boxesPerRow))%2!=0 && result.length != 0 && result[result.length-1]!=setPieces[pieceNum].grade2){\r\n          cartoonFeedback(\"Remember to match the color!\");\r\n        }else{\r\n        ev.target.textContent= \"\";\r\n        ev.preventDefault();\r\n        var data = ev.dataTransfer.getData(\"text\");\r\n        ev.target.appendChild(document.getElementById(data));\r\n        // putting the grades of the piece in addToSequence to create result, before removing the tile from setPieces\r\n        addToSequence(setPieces[pieceNum].grade1, setPieces[pieceNum].grade2,ev.target.id);\r\n        setBoxes.push(setPieces.splice(pieceNum, 1)[0]);\r\n        ev.target.firstElementChild.removeEventListener(\"dblclick\", rotate);\r\n        ev.target.removeEventListener(\"drop\", drop);\r\n        ev.target.removeEventListener(\"dragover\", prevent_drop);\r\n        ev.target.firstElementChild.addEventListener(\"click\", copy);\r\n        ev.target.firstElementChild.removeAttribute(\"id\");\r\n        drop_box(boxes);\r\n        }\r\n      }\r\n      // checking if the box and the tile are both vertical\r\n      else if (ev.target.style.width == dim1+\"px\" && (setPieces[pieceNum].angle == 0 || setPieces[pieceNum].angle == 180)) {\r\n        if(result[result.length-1]!=setPieces[pieceNum].grade1){\r\n          cartoonFeedback(\"Remember to match the color!\");\r\n        }else{\r\n          ev.target.textContent =\"\";\r\n          ev.preventDefault();\r\n          var data = ev.dataTransfer.getData(\"text\");\r\n          ev.target.appendChild(document.getElementById(data));\r\n          // putting the grades of the piece in addToSequence to create result, before removing the tile from setPieces\r\n          addToSequence(setPieces[pieceNum].grade1, setPieces[pieceNum].grade2,1);\r\n          setBoxes.push(setPieces.splice(pieceNum, 1)[0]);\r\n          ev.target.firstElementChild.removeEventListener(\"dblclick\", rotate);\r\n          ev.target.removeEventListener(\"drop\", drop);\r\n          ev.target.removeEventListener(\"dragover\", prevent_drop);\r\n          ev.target.firstElementChild.addEventListener(\"click\", copy);\r\n          ev.target.firstElementChild.removeAttribute(\"id\");\r\n          drop_box(boxes);\r\n        }\r\n      }else{\r\n        cartoonFeedback(\"Remember you can rotate the tile!\");\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction copy() {\r\n  if (event.altKey) {\r\n    if (copySpace.children.length == 0) {\r\n\r\n      if (setBoxes[event.currentTarget.parentNode.id].angle == 90 || setBoxes[event.currentTarget.parentNode.id].angle == 180) {\r\n        var color1 = setBoxes[event.currentTarget.parentNode.id].tile.lastElementChild.style.backgroundColor;\r\n        var color2 = setBoxes[event.currentTarget.parentNode.id].tile.firstElementChild.style.backgroundColor;\r\n      }\r\n      else if (setBoxes[event.currentTarget.parentNode.id].angle == 0 || setBoxes[event.currentTarget.parentNode.id].angle == 270) {\r\n        var color1 = setBoxes[event.currentTarget.parentNode.id].tile.firstElementChild.style.backgroundColor;\r\n        var color2 = setBoxes[event.currentTarget.parentNode.id].tile.lastElementChild.style.backgroundColor;\r\n      }\r\n      let copyTile = createTile(color1, color2, 11);\r\n      copyTile.removeEventListener(\"dblclick\", rotate);\r\n      copyTile.addEventListener(\"dblclick\", rotateCopy);\r\n      copyTile.addEventListener(\"dragstart\", function() {pieceNum = drag(event)});\r\n\r\n      copySpace.appendChild(copyTile);\r\n\r\n      let grade1 = setBoxes[event.currentTarget.parentNode.id].grade1;\r\n      let grade2 = setBoxes[event.currentTarget.parentNode.id].grade2;\r\n\r\n      let piece = {\r\n        tile: copyTile,\r\n        grade1: grade1,\r\n        grade2: grade2,\r\n        angle: 0,\r\n      }\r\n\r\n      setCopy.push(piece);\r\n\r\n    }\r\n  }\r\n}\r\n\r\n// this function adds the tile to the result array\r\nfunction addToSequence(grade1,grade2,id){\r\n  if(id==0){\r\n    result.push(grade1,grade2);\r\n  }else if(Math.floor((id)/boxesPerRow)%2==0){\r\n    result.push(grade2);\r\n  }else{\r\n    result.push(grade1);\r\n  }\r\n\r\n  hiddenField.setAttribute(\"value\", result.join('_'));\r\n  onGoingEvaluateMelody(result);\r\n}\r\n\r\n// this function shows up a cartoon with a feedback, based on the string passed as argument\r\nfunction cartoonFeedback(feedback){\r\n  errorSound();\r\n  let cartoon = document.getElementById(\"cartoon\");\r\n  cartoon.style.visibility = \"visible\";\r\n  cartoon.textContent = feedback;\r\n\r\n  setTimeout(function(){cartoon.style.visibility=\"hidden\"}, 2000);\r\n}\r\n// evaluating melody when dropping a tile --------------------------------------------------------\r\nfunction onGoingEvaluateMelody(melody) {\r\n  let l = melody.length;\r\n\r\n  // Last leap over 1 octave\r\n  if (tooWideLastLeap(melody) == 1) {\r\n    cartoonFeedback(\"Try to avoid big jumps!\");\r\n  }\r\n\r\n  /* // All notes are neighbour notes (no jumps)\r\n  if (l > 4 && notNeighbourNotes(melody) == 0 ) {\r\n    cartoonFeedback(\"Do not only use neigbour notes!\");\r\n  }\r\n\r\n  // All notes are far away from each other (no usage of neighbour notes)\r\n  if (l > 3 && neighbourNotes(melody) == 0 ) {\r\n    cartoonFeedback(\"Use some neighbour notes!\");\r\n  }\r\n */\r\n\r\n  // Big jump followed by other big jump\r\n  if (l > 3 && sameDirectionLastLeap(melody) != 0) {\r\n    cartoonFeedback(\"Try to change direction after a big jump!\");\r\n  }\r\n\r\n  // Repetition of the same note\r\n  if (l > 3 && meanOfDistances(melody) == 0) {\r\n    cartoonFeedback(\"Do not only use one note!\");\r\n  }\r\n  // Used 3 times more neigbour notes than leaps\r\n  else if (l > 3 && neighbourNotes(melody)>3*notNeighbourNotes(melody)) {\r\n    cartoonFeedback(\"Do not overuse neigbour notes!\");\r\n  }\r\n\r\n  // Used 3 times more leaps than neighbour notes\r\n  if (l > 3 && notNeighbourNotes(melody)>3*neighbourNotes(melody)) {\r\n    cartoonFeedback(\"Use more neighbour notes!\");\r\n  }\r\n}\r\n\r\n//------------------------------------------- END of DRAG and DROP ---------------------------\r\n// ------------ TIMER controller ---------------------------------------------\r\ntimer.startTimer();\r\n//-----------------------------------------------END of CONTROLLER-----------------------------------------------------\r\n"]}